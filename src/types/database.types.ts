// Bulk of this file was generated by running
// npx supabase gen types typescript --project-id "qzqzqzqzqzqzqzqzqzqz" --schema public > src/types/database.types.ts

export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];

export type Database = {
  // Allows to automatically instantiate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: '13.0.4';
  };
  graphql_public: {
    Tables: {
      [_ in never]: never;
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      graphql: {
        Args: {
          extensions?: Json;
          operationName?: string;
          query?: string;
          variables?: Json;
        };
        Returns: Json;
      };
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
  public: {
    Tables: {
      admin_users: {
        Row: {
          created_at: string;
          user_id: string;
        };
        Insert: {
          created_at?: string;
          user_id: string;
        };
        Update: {
          created_at?: string;
          user_id?: string;
        };
        Relationships: [];
      };
      edited_playgrounds: {
        Row: {
          created_at: string;
          has_supervised_activities: boolean | null;
          id: string;
          is_deleted: boolean;
          name: string | null;
          original_id: string;
          proposal_id: string;
          reverted_at: string | null;
          reverted_by: string | null;
          updated_at: string;
        };
        Insert: {
          created_at?: string;
          has_supervised_activities?: boolean | null;
          id?: string;
          is_deleted?: boolean;
          name?: string | null;
          original_id: string;
          proposal_id: string;
          reverted_at?: string | null;
          reverted_by?: string | null;
          updated_at?: string;
        };
        Update: {
          created_at?: string;
          has_supervised_activities?: boolean | null;
          id?: string;
          is_deleted?: boolean;
          name?: string | null;
          original_id?: string;
          proposal_id?: string;
          reverted_at?: string | null;
          reverted_by?: string | null;
          updated_at?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'edited_playgrounds_original_id_fkey';
            columns: ['original_id'];
            isOneToOne: false;
            referencedRelation: 'playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'edited_playgrounds_original_id_fkey';
            columns: ['original_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'edited_playgrounds_original_id_fkey';
            columns: ['original_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds_with_ratings';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'edited_playgrounds_original_id_fkey';
            columns: ['original_id'];
            isOneToOne: false;
            referencedRelation: 'v_playground_ratings';
            referencedColumns: ['playground_id'];
          },
          {
            foreignKeyName: 'edited_playgrounds_proposal_id_fkey';
            columns: ['proposal_id'];
            isOneToOne: false;
            referencedRelation: 'playground_edit_proposals';
            referencedColumns: ['id'];
          },
        ];
      };
      playground_edit_proposals: {
        Row: {
          admin_notes: string | null;
          created_at: string;
          delete_playground: boolean;
          has_supervised_activities: boolean | null;
          id: string;
          is_new_playground: boolean;
          playground_id: string | null;
          proposed_location: unknown | null;
          proposed_name: string | null;
          reason: string | null;
          status: string;
          updated_at: string;
          user_id: string | null;
        };
        Insert: {
          admin_notes?: string | null;
          created_at?: string;
          delete_playground?: boolean;
          has_supervised_activities?: boolean | null;
          id?: string;
          is_new_playground?: boolean;
          playground_id?: string | null;
          proposed_location?: unknown | null;
          proposed_name?: string | null;
          reason?: string | null;
          status?: string;
          updated_at?: string;
          user_id?: string | null;
        };
        Update: {
          admin_notes?: string | null;
          created_at?: string;
          delete_playground?: boolean;
          has_supervised_activities?: boolean | null;
          id?: string;
          is_new_playground?: boolean;
          playground_id?: string | null;
          proposed_location?: unknown | null;
          proposed_name?: string | null;
          reason?: string | null;
          status?: string;
          updated_at?: string;
          user_id?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'playground_edit_proposals_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'playground_edit_proposals_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'playground_edit_proposals_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds_with_ratings';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'playground_edit_proposals_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_playground_ratings';
            referencedColumns: ['playground_id'];
          },
        ];
      };
      playgrounds: {
        Row: {
          city: string | null;
          created_at: string;
          data_source: Database['public']['Enums']['playground_data_source_type'];
          has_supervised_activities: boolean;
          id: string;
          location: unknown;
          name: string | null;
        };
        Insert: {
          city?: string | null;
          created_at?: string;
          data_source: Database['public']['Enums']['playground_data_source_type'];
          has_supervised_activities?: boolean;
          id?: string;
          location: unknown;
          name?: string | null;
        };
        Update: {
          city?: string | null;
          created_at?: string;
          data_source?: Database['public']['Enums']['playground_data_source_type'];
          has_supervised_activities?: boolean;
          id?: string;
          location?: unknown;
          name?: string | null;
        };
        Relationships: [];
      };
      ratings: {
        Row: {
          created_at: string;
          id: string;
          is_public: boolean | null;
          playground_id: string | null;
          rating: number | null;
          updated_at: string;
          user_id: string | null;
          visit_id: string | null;
        };
        Insert: {
          created_at?: string;
          id?: string;
          is_public?: boolean | null;
          playground_id?: string | null;
          rating?: number | null;
          updated_at?: string;
          user_id?: string | null;
          visit_id?: string | null;
        };
        Update: {
          created_at?: string;
          id?: string;
          is_public?: boolean | null;
          playground_id?: string | null;
          rating?: number | null;
          updated_at?: string;
          user_id?: string | null;
          visit_id?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'ratings_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'ratings_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'ratings_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds_with_ratings';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'ratings_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_playground_ratings';
            referencedColumns: ['playground_id'];
          },
          {
            foreignKeyName: 'ratings_visit_id_fkey';
            columns: ['visit_id'];
            isOneToOne: true;
            referencedRelation: 'visits';
            referencedColumns: ['id'];
          },
        ];
      };
      user_filters: {
        Row: {
          city: string | null;
          created_at: string;
          data_source: Database['public']['Enums']['playground_data_source_type'] | null;
          has_supervised_activities: boolean | null;
          hide_unnamed: boolean | null;
          id: string;
          min_stars: number | null;
          min_user_stars: number | null;
          no_rating: boolean | null;
          no_user_rating: boolean | null;
          updated_at: string;
          user_id: string | null;
          visit_status: string | null;
        };
        Insert: {
          city?: string | null;
          created_at?: string;
          data_source?: Database['public']['Enums']['playground_data_source_type'] | null;
          has_supervised_activities?: boolean | null;
          hide_unnamed?: boolean | null;
          id?: string;
          min_stars?: number | null;
          min_user_stars?: number | null;
          no_rating?: boolean | null;
          no_user_rating?: boolean | null;
          updated_at?: string;
          user_id?: string | null;
          visit_status?: string | null;
        };
        Update: {
          city?: string | null;
          created_at?: string;
          data_source?: Database['public']['Enums']['playground_data_source_type'] | null;
          has_supervised_activities?: boolean | null;
          hide_unnamed?: boolean | null;
          id?: string;
          min_stars?: number | null;
          min_user_stars?: number | null;
          no_rating?: boolean | null;
          no_user_rating?: boolean | null;
          updated_at?: string;
          user_id?: string | null;
          visit_status?: string | null;
        };
        Relationships: [];
      };
      user_preferences: {
        Row: {
          created_at: string;
          default_public_ratings: boolean;
          id: string;
          updated_at: string;
          user_id: string | null;
        };
        Insert: {
          created_at?: string;
          default_public_ratings?: boolean;
          id?: string;
          updated_at?: string;
          user_id?: string | null;
        };
        Update: {
          created_at?: string;
          default_public_ratings?: boolean;
          id?: string;
          updated_at?: string;
          user_id?: string | null;
        };
        Relationships: [];
      };
      visits: {
        Row: {
          id: string;
          notes: string | null;
          playground_id: string | null;
          user_id: string | null;
          visited_at: string;
        };
        Insert: {
          id?: string;
          notes?: string | null;
          playground_id?: string | null;
          user_id?: string | null;
          visited_at?: string;
        };
        Update: {
          id?: string;
          notes?: string | null;
          playground_id?: string | null;
          user_id?: string | null;
          visited_at?: string;
        };
        Relationships: [
          {
            foreignKeyName: 'visits_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'visits_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'visits_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_active_playgrounds_with_ratings';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'visits_playground_id_fkey';
            columns: ['playground_id'];
            isOneToOne: false;
            referencedRelation: 'v_playground_ratings';
            referencedColumns: ['playground_id'];
          },
        ];
      };
    };
    Views: {
      v_active_playgrounds: {
        Row: {
          city: string | null;
          created_at: string | null;
          data_source: Database['public']['Enums']['playground_data_source_type'] | null;
          has_supervised_activities: boolean | null;
          id: string | null;
          location: unknown | null;
          name: string | null;
        };
        Relationships: [];
      };
      v_active_playgrounds_with_ratings: {
        Row: {
          avg_rating: number | null;
          city: string | null;
          created_at: string | null;
          data_source: Database['public']['Enums']['playground_data_source_type'] | null;
          has_supervised_activities: boolean | null;
          id: string | null;
          location: unknown | null;
          name: string | null;
          total_ratings: number | null;
          user_rating: number | null;
        };
        Relationships: [];
      };
      v_distinct_cities: {
        Row: {
          city: string | null;
        };
        Relationships: [];
      };
      v_playground_ratings: {
        Row: {
          avg_rating: number | null;
          playground_id: string | null;
          total_ratings: number | null;
        };
        Relationships: [];
      };
    };
    Functions: {
      delete_user: {
        Args: Record<PropertyKey, never>;
        Returns: undefined;
      };
      get_closest_playground_city: {
        Args: { lat: number; lng: number };
        Returns: string;
      };
      get_playgrounds_in_bbox: {
        Args: {
          max_lat: number;
          max_lon: number;
          min_lat: number;
          min_lon: number;
        };
        Returns: {
          like: unknown;
        }[];
      };
      get_playgrounds_with_ratings_in_bbox: {
        Args: {
          max_lat: number;
          max_lon: number;
          min_lat: number;
          min_lon: number;
        };
        Returns: {
          like: unknown;
        }[];
      };
      playgrounds_nearby: {
        Args: { lat: number; lng: number; radius_meters?: number };
        Returns: {
          city: string | null;
          created_at: string;
          data_source: Database['public']['Enums']['playground_data_source_type'];
          has_supervised_activities: boolean;
          id: string;
          location: unknown;
          name: string | null;
        }[];
      };
    };
    Enums: {
      playground_data_source_type: 'municipality' | 'osm' | 'community';
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type DatabaseWithoutInternals = Omit<Database, '__InternalSupabase'>;

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, 'public'>];

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Views'])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema['Tables'] & DefaultSchema['Views'])
    ? (DefaultSchema['Tables'] & DefaultSchema['Views'])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema['Tables']
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables']
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema['Tables']
    ? DefaultSchema['Tables'][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema['Enums']
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums']
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions['schema']]['Enums'][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema['Enums']
    ? DefaultSchema['Enums'][DefaultSchemaEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema['CompositeTypes']
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes']
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions['schema']]['CompositeTypes'][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema['CompositeTypes']
    ? DefaultSchema['CompositeTypes'][PublicCompositeTypeNameOrOptions]
    : never;

export const Constants = {
  graphql_public: {
    Enums: {},
  },
  public: {
    Enums: {
      playground_data_source_type: ['municipality', 'osm', 'community'],
    },
  },
} as const;

// Legacy interfaces for backward compatibility
export interface Playground {
  id: string;
  name: string | null;
  location: string; // PostGIS geometry is returned as WKT (Well-Known Text)
  created_at: string;
  has_supervised_activities: boolean;
  city: string | null;
  data_source: 'municipality' | 'osm' | 'community' | null;
  avg_rating: number | null;
  total_ratings: number;
  user_rating: number | null;
}

export interface PlaygroundWithCoordinates extends Omit<Playground, 'location'> {
  latitude: number;
  longitude: number;
}

export interface Visit {
  id: string;
  playground_id: string | null;
  user_id: string | null;
  visited_at: string;
  notes: string | null;
}

export interface Rating {
  id: string;
  playground_id: string;
  user_id: string;
  rating: number;
  is_public: boolean;
  created_at: string;
  updated_at: string;
  visit_id: string;
}

export interface PlaygroundRatings {
  avg_rating: number;
  total_ratings: number;
  user_rating: number | null;
}

export interface PublicRating {
  rating: number;
  created_at: string;
  updated_at: string;
}

export interface UserFilter {
  id: string;
  user_id: string;
  visit_status: 'visited' | 'unvisited' | null;
  min_stars: number | null;
  min_user_stars: number | null;
  has_supervised_activities: boolean | null;
  city: string | null;
  data_source: 'municipality' | 'osm' | 'community' | null;
  no_rating: boolean | null;
  no_user_rating: boolean | null;
  hide_unnamed: boolean | null;
  created_at: string;
  updated_at: string;
}

export interface UserPreferences {
  id: string;
  user_id: string;
  default_public_ratings: boolean;
  created_at: string;
  updated_at: string;
}

export interface PlaygroundEditProposal {
  id: string;
  playground_id: string | null;
  user_id: string | null;
  proposed_name: string | null;
  delete_playground: boolean;
  has_supervised_activities: boolean | null;
  reason: string | null;
  status: 'pending' | 'approved' | 'rejected';
  admin_notes: string | null;
  created_at: string;
  updated_at: string;
  proposed_location: string | null;
  is_new_playground: boolean;
}

export interface EditProposalWithPlayground extends PlaygroundEditProposal {
  playground?: {
    id: string;
    name: string;
    has_supervised_activities: boolean;
    location: string;
    city: string;
    data_source: string;
    created_at: string;
  };
  edit?: Array<{
    id: string;
    reverted_at: string | null;
    reverted_by: string | null;
  }>;
}

export interface PlaygroundWithLocation {
  id: string;
  name: string | null;
  has_supervised_activities: boolean;
  location: {
    coordinates: [number, number];
  };
  city: string | null;
  data_source: string;
  created_at: string;
}
